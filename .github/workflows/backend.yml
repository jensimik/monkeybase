name: monkeybase backend

on:
  push:
    paths:
      - "backend/**/*"
      - ".github/workflows/backend.yml"

env:
  PROJECT_NAME: testing
  POSTGRES_SERVER: localhost
  POSTGRES_USER: db_user
  POSTGRES_PASSWORD: db_pass
  POSTGRES_DB: db
  SERVER_HOST: http://localhost
  SECRET_KEY: secret-key-for-testing
  STRIPE_API_KEY: ${{ secrets.STRIPE_API_KEY }}
  STRIPE_WEBHOOK_SECRET: ${{ secrets.STRIPE_WEBHOOK_SECRET }}
  NETS_EASY_SECRET_KEY: ${{ secrets.NETS_EASY_SECRET_KEY }}
  NETS_EASY_WEBHOOK_SECRET: simplesomethingcurrently
  NETS_EASY_BASE_URL: https://test.api.dibspayment.eu

jobs:
  test:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:11.5-alpine
        env:
          POSTGRES_USER: db_user
          POSTGRES_PASSWORD: db_pass
          POSTGRES_DB: db
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
    - uses: actions/checkout@v3
    - name: Set up Python 3.9
      uses: actions/setup-python@v3
      with:
        python-version: 3.9
    - name: cache dependencies
      uses: actions/cache@v2
      with:
        path: ${{ env.pythonLocation }}
        key: ${{ env.pythonLocation }}-${{ hashFiles('backend/requirements.txt') }}-${{ hashFiles('backend/dev-requirements.txt') }}
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
        if [ -f dev-requirements.txt ]; then pip install -r dev-requirements.txt; fi
      working-directory: backend
    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
      working-directory: backend
    - name: seed data
      run: |
        python -m seed
      working-directory: backend
    - name: Test with pytest
      run: |
        pytest --cov-fail-under=60 --cov-report=xml:backend-coverage.xml --cov=backend
      working-directory: backend
    - name: codecov
      uses: codecov/codecov-action@v2.1.0
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        files: ./backend/backend-coverage.xml
        fail_ci_if_error: true